AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS DMS レプリケーション設定 - 既存の Aurora MySQL 環境に対するレプリケーション'

Parameters:
  # 既存スタックの名前
  ExistingStackName:
    Type: String
    Description: 既存の Aurora MySQL スタックの名前

  # データベース認証情報
  DBUsername:
    Type: String
    Description: データベースユーザー名

  DBPassword:
    Type: String
    NoEcho: true
    Description: データベースパスワード

  # DMS インスタンスの設定
  DMSInstanceClass:
    Type: String
    Default: dms.t3.medium
    Description: DMS レプリケーションインスタンスのクラス

  # レプリケーション対象データベース
  SourceDatabaseName:
    Type: String
    Default: world
    Description: レプリケーション対象のデータベース名

Resources:
  # 既存スタックの出力値を取得するためのカスタムリソース
  StackOutputsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt StackOutputsExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          def handler(event, context):
            try:
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                return

              stack_name = event['ResourceProperties']['StackName']
              cfn = boto3.client('cloudformation')
              response = cfn.describe_stacks(StackName=stack_name)
              outputs = {}

              for output in response['Stacks'][0]['Outputs']:
                outputs[output['OutputKey']] = output['OutputValue']

              cfnresponse.send(event, context, cfnresponse.SUCCESS, outputs, stack_name)
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  # Lambda 実行ロール
  StackOutputsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudFormationReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'

  # 既存スタックの出力値を取得
  StackOutputs:
    Type: Custom::StackOutputs
    Properties:
      ServiceToken: !GetAtt StackOutputsFunction.Arn
      StackName: !Ref ExistingStackName

  # DMS サブネットグループ - 既存の VPC のプライベートサブネットを使用
  DMSSubnetGroup:
    Type: AWS::DMS::ReplicationSubnetGroup
    Properties:
      ReplicationSubnetGroupDescription: DMS Subnet Group for RDS Replication
      SubnetIds:
        - !GetAtt StackOutputs.PrivateSubnet1
        - !GetAtt StackOutputs.PrivateSubnet2
      Tags:
        - Key: Name
          Value: DMS-Subnet-Group

  # DMS 用セキュリティグループ - 既存の RDS セキュリティグループとの通信を許可
  DMSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DMS replication instance
      VpcId: !GetAtt StackOutputs.VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          Description: Allow all TCP traffic from RDS security group
          SourceSecurityGroupId: !GetAtt StackOutputs.DBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: DMS-Security-Group

  # DMS サービスロール - 必要な IAM ロールとポリシー
  DMSVPCRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: dms.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole
      Path: /

  # DMS レプリケーションインスタンス
  DMSReplicationInstance:
    Type: AWS::DMS::ReplicationInstance
    DependsOn: DMSVPCRole
    Properties:
      ReplicationInstanceClass: !Ref DMSInstanceClass
      AllocatedStorage: 50
      MultiAZ: false
      EngineVersion: '3.5.1'
      PubliclyAccessible: false
      ReplicationSubnetGroupIdentifier: !Ref DMSSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DMSSecurityGroup
      Tags:
        - Key: Name
          Value: DMS-Replication-Instance

  # DMS ソースエンドポイント - セカンドDBを指す
  DMSSourceEndpoint:
    Type: AWS::DMS::Endpoint
    Properties:
      EndpointType: source
      EngineName: aurora
      ServerName: !GetAtt StackOutputs.SecondDBEndpoint
      Port: 3306
      Username: !Ref DBUsername
      Password: !Ref DBPassword
      DatabaseName: !Ref SourceDatabaseName
      # Aurora MySQLソースでは、バイナリログ関連の設定はデータベース側で行う必要があります
      # ExtraConnectionAttributesは必要な場合のみ指定します
      Tags:
        - Key: Name
          Value: DMS-Source-Endpoint

  # DMS ターゲットエンドポイント - マスターDBを指す
  DMSTargetEndpoint:
    Type: AWS::DMS::Endpoint
    Properties:
      EndpointType: target
      EngineName: aurora
      ServerName: !GetAtt StackOutputs.MasterDBEndpoint
      Port: 3306
      Username: !Ref DBUsername
      Password: !Ref DBPassword
      DatabaseName: !Ref SourceDatabaseName
      Tags:
        - Key: Name
          Value: DMS-Target-Endpoint

  # DMS レプリケーションタスク
  DMSReplicationTask:
    Type: AWS::DMS::ReplicationTask
    Properties:
      ReplicationInstanceArn: !Ref DMSReplicationInstance
      SourceEndpointArn: !Ref DMSSourceEndpoint
      TargetEndpointArn: !Ref DMSTargetEndpoint
      MigrationType: full-load-and-cdc
      TableMappings: !Sub |
        {
          "rules": [
            {
              "rule-type": "selection",
              "rule-id": "1",
              "rule-name": "include-world-schema",
              "object-locator": {
                "schema-name": "${SourceDatabaseName}",
                "table-name": "%"
              },
              "rule-action": "include"
            },
            {
              "rule-type": "selection",
              "rule-id": "2",
              "rule-name": "exclude-employees-schema",
              "object-locator": {
                "schema-name": "employees",
                "table-name": "%"
              },
              "rule-action": "exclude"
            }
          ]
        }
      ReplicationTaskSettings: !Sub |
        {
          "TargetMetadata": {
            "TargetSchema": "",
            "SupportLobs": true,
            "FullLobMode": false,
            "LobChunkSize": 64,
            "LimitedSizeLobMode": true,
            "LobMaxSize": 32
          },
          "FullLoadSettings": {
            "TargetTablePrepMode": "TRUNCATE_BEFORE_LOAD",
            "CreatePkAfterFullLoad": false,
            "StopTaskCachedChangesApplied": false,
            "StopTaskCachedChangesNotApplied": false,
            "MaxFullLoadSubTasks": 8,
            "TransactionConsistencyTimeout": 600,
            "CommitRate": 10000
          },
          "Logging": {
            "EnableLogging": true,
            "LogComponents": [
              {
                "Id": "TRANSFORMATION",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "SOURCE_UNLOAD",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "IO",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "TARGET_LOAD",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "PERFORMANCE",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "SOURCE_CAPTURE",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "SORTER",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "REST_SERVER",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "VALIDATOR_EXT",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "TARGET_APPLY",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "TASK_MANAGER",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "TABLES_MANAGER",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "METADATA_MANAGER",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "FILE_FACTORY",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "COMMON",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "ADDONS",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "DATA_STRUCTURE",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "COMMUNICATION",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              },
              {
                "Id": "FILE_TRANSFER",
                "Severity": "LOGGER_SEVERITY_DEFAULT"
              }
            ]
          },
          "ControlTablesSettings": {
            "historyTimeslotInMinutes": 5,
            "ControlSchema": "",
            "HistoryTimeslotInMinutes": 5,
            "HistoryTableEnabled": false,
            "SuspendedTablesTableEnabled": false,
            "StatusTableEnabled": false
          },
          "StreamBufferSettings": {
            "StreamBufferCount": 3,
            "StreamBufferSizeInMB": 8,
            "CtrlStreamBufferSizeInMB": 5
          },
          "ChangeProcessingDdlHandlingPolicy": {
            "HandleSourceTableDropped": true,
            "HandleSourceTableTruncated": true,
            "HandleSourceTableAltered": true
          },
          "ErrorBehavior": {
            "DataErrorPolicy": "LOG_ERROR",
            "DataTruncationErrorPolicy": "LOG_ERROR",
            "DataErrorEscalationPolicy": "SUSPEND_TABLE",
            "DataErrorEscalationCount": 0,
            "TableErrorPolicy": "SUSPEND_TABLE",
            "TableErrorEscalationPolicy": "STOP_TASK",
            "TableErrorEscalationCount": 0,
            "RecoverableErrorCount": -1,
            "RecoverableErrorInterval": 5,
            "RecoverableErrorThrottling": true,
            "RecoverableErrorThrottlingMax": 1800,
            "ApplyErrorDeletePolicy": "IGNORE_RECORD",
            "ApplyErrorInsertPolicy": "LOG_ERROR",
            "ApplyErrorUpdatePolicy": "LOG_ERROR",
            "ApplyErrorEscalationPolicy": "LOG_ERROR",
            "ApplyErrorEscalationCount": 0,
            "FullLoadIgnoreConflicts": true
          },
          "ChangeProcessingTuning": {
            "BatchApplyPreserveTransaction": true,
            "BatchApplyTimeoutMin": 1,
            "BatchApplyTimeoutMax": 30,
            "BatchApplyMemoryLimit": 500,
            "BatchSplitSize": 0,
            "MinTransactionSize": 1000,
            "CommitTimeout": 1,
            "MemoryLimitTotal": 1024,
            "MemoryKeepTime": 60,
            "StatementCacheSize": 50
          }
        }
      Tags:
        - Key: Name
          Value: DMS-Replication-Task

Outputs:
  DMSTaskARN:
    Description: DMS レプリケーションタスクの ARN
    Value: !Ref DMSReplicationTask

  StopTaskCommand:
    Description: レプリケーションタスクを停止するコマンド
    Value: !Sub "aws dms stop-replication-task --replication-task-arn ${DMSReplicationTask}"

  StartTaskCommand:
    Description: レプリケーションタスクを再開するコマンド
    Value: !Sub "aws dms start-replication-task --replication-task-arn ${DMSReplicationTask} --start-replication-task-type resume-processing"